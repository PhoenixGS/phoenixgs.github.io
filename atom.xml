<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PhoenixGS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://x.phoenixgs.cn/"/>
  <updated>2018-12-27T08:23:49.050Z</updated>
  <id>http://x.phoenixgs.cn/</id>
  
  <author>
    <name>PhoenixGS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后缀自动机</title>
    <link href="http://x.phoenixgs.cn/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>http://x.phoenixgs.cn/后缀自动机/</id>
    <published>2018-12-27T07:43:09.000Z</published>
    <updated>2018-12-27T08:23:49.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sam">SAM</h1><p>关于后缀自动机整个算法，在这了就不多说了，感觉别人写的都很好QAQ  可以去看看下面几篇文章，感觉学过OI的应该都能看懂。。</p><ol type="1"><li><p><a href="http://nirobc.com/20181224.pdf" class="uri" target="_blank" rel="noopener">http://nirobc.com/20181224.pdf</a></p></li><li><p><a href="https://oi-wiki.org/string/sam/" class="uri" target="_blank" rel="noopener">https://oi-wiki.org/string/sam/</a></p></li><li><p><a href="https://blog.csdn.net/qq_35649707/article/details/66473069" class="uri" target="_blank" rel="noopener">https://blog.csdn.net/qq_35649707/article/details/66473069</a></p></li></ol><a id="more"></a><p>我的模版：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">knum++;</span><br><span class="line"><span class="keyword">int</span> u = last;</span><br><span class="line"><span class="keyword">int</span> v = knum;</span><br><span class="line">last = knum;</span><br><span class="line">len[v] = len[u] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; u &amp;&amp; ! to[u][c]; u = pre[u])</span><br><span class="line">&#123;</span><br><span class="line">to[u][c] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (! u)</span><br><span class="line">&#123;</span><br><span class="line">pre[v] = root;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> w = to[u][c];</span><br><span class="line"><span class="keyword">if</span> (len[u] + <span class="number">1</span> == len[w])</span><br><span class="line">&#123;</span><br><span class="line">pre[v] = w;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">knum++;</span><br><span class="line"><span class="keyword">int</span> neww = knum;</span><br><span class="line">pre[neww] = pre[w];</span><br><span class="line">len[neww] = len[u] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">to[neww][i] = to[w][i];</span><br><span class="line">&#125;</span><br><span class="line">pre[w] = pre[v] = neww;</span><br><span class="line"><span class="keyword">for</span> (; u &amp;&amp; to[u][c] == w; u = pre[u])</span><br><span class="line">&#123;</span><br><span class="line">to[u][kkc] = neww;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//init</span></span><br><span class="line">last = <span class="number">1</span>;</span><br><span class="line">knum = <span class="number">1</span>;</span><br><span class="line">    root = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我就写一下自己的理解和一些性质</p><ul><li><p>后缀自动机每个节点的状态为：后面还要输入哪些串就是一个后缀</p></li><li><p>对于后缀自动机中每个节点所表示的字符串（起点到这个节点的所有字符串），是在原串中出现位置一模一样的所有字符串。按照长度排序后，是长度依次减一并且是前一个的后缀。比如：<span class="math inline">\(abcac, bcac, cac\)</span></p></li><li><p>一个节点沿着<code>pre</code>一直走到起始节点的所有节点所表示的所有字符串，正好是最长的字符串的所有后缀</p></li></ul><h1 id="时间复杂度">时间复杂度</h1><h2 id="状态数">状态数</h2><p>状态数是<span class="math inline">\(O(n)\)</span>的，这十分显然。</p><p>每个状态按照pre边连接可以变成一棵树。</p><p>父子节点集合关系是包含的</p><p>兄弟节点集合关系是无交的</p><p>所以脑补一下，就可以发现状态个数最多就是二叉树的时候，也就只有<span class="math inline">\(2n-1\)</span>。。。</p><h2 id="转移数">转移数</h2><p>首先，一个十分显然的结论是，转移数最多为<span class="math inline">\(O(\Sigma * n)\)</span>，其中<span class="math inline">\(\Sigma\)</span>表示字符集大小</p><p>有一个更加紧的上限：</p><p><span class="math display">\[3n-4\; (对于n\geq 3)\]</span></p><p>然后，考虑以下的事实：</p><p>初始节点开始的最长的转移路径树</p><p>节点数为<span class="math inline">\(2n-1\)</span>，那么边数即为<span class="math inline">\(2n-2\)</span></p><p>考虑不在这棵树中的转移<span class="math inline">\(u\to v\)</span>，字符为<span class="math inline">\(y\)</span></p><p>那么初始节点到<span class="math inline">\(u\)</span>的字典序最大字符串（最小应该也行，只要保证唯一）<span class="math inline">\(x\)</span>，以及<span class="math inline">\(v\)</span>到任意一个终止节点的最长字符串（同样也可以是最小）<span class="math inline">\(z\)</span>。</p><p><span class="math inline">\(x+y+z\)</span>即为原串的一个后缀，后缀只有<span class="math inline">\(n-1\)</span>个，（原串这个后缀肯定在刚开始的树上）。</p><p>因此转移数的上限即为<span class="math inline">\(3n-4\)</span></p><p>能达到上限的字符串</p><p><span class="math display">\[abb \dots bc\]</span></p><h2 id="修改to的次数">修改<code>to</code>的次数</h2><p>从上面的模版可以看出，现在除了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; u &amp;&amp; to[u][c] == w; u = pre[u])</span><br><span class="line">&#123;</span><br><span class="line">    to[u][kkc] = neww;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段之外时间复杂度就是<span class="math inline">\(O(n)\)</span></p><p>那么，这一段的总共的时间复杂度是多少呢？</p><p>定义<span class="math inline">\(minlen(u)\)</span>表示为能走到<span class="math inline">\(u\)</span>的所有字符串的最小长度</p><p>显然<span class="math inline">\(minlen\)</span>有一个性质：</p><p><span class="math display">\[minlen(u)&gt;minlen(pre[u])&gt;minlen(pre[pre[u]])\cdots &gt; minlen(root) \quad (*)\]</span></p><p>那么考虑<span class="math inline">\(minlen(pre[last])\)</span>这个东西</p><p>如果执行到了这个<code>for</code>循环，那么<span class="math inline">\(pre[last]\)</span>就变成了<span class="math inline">\(neww\)</span></p><p>可以发现这个<code>for</code>循环如果循环了<span class="math inline">\(k\)</span>次</p><p>那么<span class="math inline">\(minlen(neww)\leq minlen(lastu)+1\)</span>，其中<span class="math inline">\(lastu\)</span>是<code>for</code>循环枚举的最后的<span class="math inline">\(u\)</span></p><p>通过<span class="math inline">\((*)\)</span>可以知道<span class="math inline">\(minlen(lastu)\leq minlen(pre[last])-k\)</span></p><p>那么<span class="math inline">\(minlen(pre[neww])\leq minlen(pre[last])-k+1\)</span></p><p>其中<span class="math inline">\(+1\)</span>最多加<span class="math inline">\(n\)</span>次，<span class="math inline">\(minlen(pre[last])\)</span>的初值为<span class="math inline">\(0\)</span></p><p>从而<code>for</code>循环执行的次数是<span class="math inline">\(O(n)\)</span>的</p><h2 id="总结">总结</h2><p>从上面三部分可知，构建后缀自动机的的时间复杂度为<span class="math inline">\(O(n)\)</span></p><p>如果有不懂的欢迎打扰</p><p>如果有哪位大佬能想出更好的证明方法的话，请务必告诉我QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sam&quot;&gt;SAM&lt;/h1&gt;
&lt;p&gt;关于后缀自动机整个算法，在这了就不多说了，感觉别人写的都很好QAQ  可以去看看下面几篇文章，感觉学过OI的应该都能看懂。。&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://nirobc.com/20181224.pdf&quot; class=&quot;uri&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nirobc.com/20181224.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://oi-wiki.org/string/sam/&quot; class=&quot;uri&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://oi-wiki.org/string/sam/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35649707/article/details/66473069&quot; class=&quot;uri&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_35649707/article/details/66473069&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="自动机" scheme="http://x.phoenixgs.cn/tags/%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="后缀自动机" scheme="http://x.phoenixgs.cn/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Min_25筛</title>
    <link href="http://x.phoenixgs.cn/Min-25/"/>
    <id>http://x.phoenixgs.cn/Min-25/</id>
    <published>2018-11-30T06:47:35.000Z</published>
    <updated>2018-12-27T05:59:39.307Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介">简介</h1><p>Min_25筛用来求一个函数的前缀和</p><p>如果函数是积性函数就可以做，如果不是积性函数的话有一部分也是可以做的</p><p>算法过程就像是在模拟埃氏筛法</p><p>时间复杂度是<span class="math inline">\(O(\frac{n^{\frac{3}{4}}}{log(\sqrt{n})})\)</span>，然而我并不会证</p><a id="more"></a><h1 id="算法">算法</h1><h2 id="质数的函数值的前缀和">质数的函数值的前缀和</h2><p>设<span class="math inline">\(m(x)\)</span>表示<span class="math inline">\(x\)</span>的最小质因子</p><p>假如要求</p><p><span class="math display">\[\sum_{i = 1}^{n}f(i)[i是质数]\]</span></p><p>首先将<span class="math inline">\(\sqrt{n}\)</span>之内的质数全部筛出来，放在<code>prime</code>数组里</p><p>设</p><p><span class="math display">\[g(n,j)=\sum_{i = 2}^{n}f(i)[m(i) &gt; prime_j 或 i 是质数]\]</span></p><p>那么</p><p><span class="math display">\[g(n,j) = \begin{cases} g(n,j - 1) - f(j)[g(\lfloor \frac{n}{prime_j} \rfloor, j - 1) - g(prime_{j - 1}, j - 1)] &amp; prime_j^2 \leq n \\\\ g(n,j - 1) &amp; prime_j^2 &gt; n\end{cases}\]</span></p><p>显然，其中的<span class="math inline">\(g(prime_{j-1},j-1)=\sum_{i=1}^{j-1}f(prime_i)\)</span></p><p>那么原式中第一维有用的值只有<span class="math inline">\(O(\sqrt{n})\)</span>种，预处理即可</p><p>最终<span class="math inline">\(g(n,primenum)\)</span>就是我们要求的<span class="math inline">\(\sum_{i = 1}^{n}f(i)[i是质数]\)</span></p><h3 id="关于fx">关于<span class="math inline">\(f(x)\)</span></h3><p>如果只求质数的函数值的话，</p><p><span class="math inline">\(f(x)\)</span>应该满足下面几个条件：</p><ol type="1"><li><p>若<span class="math inline">\(x\)</span>是质数<span class="math inline">\(f(x)\)</span>应该要能在<span class="math inline">\(O(1)\)</span>内求出来</p></li><li><p>要能够快速求出<span class="math inline">\(\sum_{i=2}^{n}f&#39;(i)\)</span>，其中<span class="math inline">\(f&#39;(i)=\Pi_{j,k}f(j)[k &gt; 0][j^k|n]\)</span></p></li></ol><h2 id="函数值的前缀和">函数值的前缀和</h2><h3 id="递归版">递归版</h3><p>假设我们要求的函数是<span class="math inline">\(f(x)\)</span>，那么问题就是求</p><p><span class="math display">\[\sum_{i = 1}^{n}f(i)\]</span></p><p>之前已经求出了</p><p><span class="math display">\[\sum_{i = 1}^{n}f(i)[i是质数]\]</span></p><p>的值</p><p>那么，现在设</p><p><span class="math display">\[h(n,j) = \sum_{i=2}^nf(i)[m(i) \geq prime_j]\]</span></p><p>那么</p><p><span class="math display">\[h(n,j)=g(n,primenum) - g(prime_{i-1},i-1)+\\\\\sum_{i=j}^{primenum}\sum_{e\geq 1 且 prime_i^{e+1}\leq n}f(prime_i^e)h(\lfloor \frac{n}{prime_i^e} \rfloor,i+1)+f(prime_i^{e+1})\]</span></p><p>和上面一样，第一维有用的取值只有<span class="math inline">\(O(\sqrt{n})\)</span>种</p><p>写一个递归函数，最后的答案即为<span class="math inline">\(h(n,1)+f(1)\)</span></p><p>假如就询问没几个<span class="math inline">\(n\)</span>的答案，就可以用这种方法</p><h3 id="非递归版">非递归版</h3><p>这次改变一下状态</p><p>设</p><p><span class="math display">\[h(n,j)=\sum_{i=2}^nf(i)[m(i)\geq prime_j 或 i是质数]\]</span></p><p>那么</p><p><span class="math display">\[h(n,j)=\begin{cases} h(n,j+1)+\\\\ \sum_{e \geq 1 且prime_j^{e+1}\leq n}f(prime_j^e)[h(\lfloor \frac{n}{prime_j^e} \rfloor,j + 1) - g(prime_i,i)] &amp; prime_j^2 \leq n \\\\ h(n,j+1) &amp; prime_j^2 &gt; n\end{cases}\]</span></p><p>有没有发现这个式子与质数函数值的前缀和的式子特别像？只不过质数一个是从小枚举到大，一个是从大枚举到小</p><p>答案为<span class="math inline">\(h(n,1)+f(1)\)</span></p><p>假如要询问许多<span class="math inline">\(n&#39;= \lfloor \frac{n}{x} \rfloor\)</span>的答案，就可以用这种方法</p><h3 id="关于fx-1">关于<span class="math inline">\(f(x)\)</span></h3><p><span class="math inline">\(f(x)\)</span>函数如果是积性函数，那么应该都可以做</p><p>假如不是的话，首先要满足求质数的函数值的前缀和的那些条件</p><p>并且若<span class="math inline">\(x=ab,gcd(a,b)=1\)</span>，<span class="math inline">\(f(x)\)</span>能<span class="math inline">\(O(1)\)</span>从<span class="math inline">\(f(a)\)</span>和<span class="math inline">\(f(b)\)</span>合并，那么应该就能做了（其实我也不是很清楚qaq</p><h2 id="关于时间复杂度">关于时间复杂度</h2><p>暂时还不会。。。</p><h1 id="参考资料">参考资料</h1><ol type="1"><li><p><a href="http://www.cnblogs.com/zzqsblog/p/8302815.html" class="uri" target="_blank" rel="noopener">http://www.cnblogs.com/zzqsblog/p/8302815.html</a></p></li><li><p><a href="http://www.hekai.site/wordpress/2018/09/04/min_25%E7%AD%9B/" target="_blank" rel="noopener">http://www.hekai.site/wordpress/2018/09/04/min_25%E7%AD%9B/</a></p></li><li><p><a href="https://blog.csdn.net/XianHaoMing/article/details/80397777" class="uri" target="_blank" rel="noopener">https://blog.csdn.net/XianHaoMing/article/details/80397777</a></p></li><li><p><a href="https://www.cnblogs.com/Menhera/p/9226649.html" class="uri" target="_blank" rel="noopener">https://www.cnblogs.com/Menhera/p/9226649.html</a></p></li><li><p><a href="https://blog.csdn.net/ZLTJohn/article/details/79703503" class="uri" target="_blank" rel="noopener">https://blog.csdn.net/ZLTJohn/article/details/79703503</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;p&gt;Min_25筛用来求一个函数的前缀和&lt;/p&gt;
&lt;p&gt;如果函数是积性函数就可以做，如果不是积性函数的话有一部分也是可以做的&lt;/p&gt;
&lt;p&gt;算法过程就像是在模拟埃氏筛法&lt;/p&gt;
&lt;p&gt;时间复杂度是&lt;span class=&quot;math inline&quot;&gt;\(O(\frac{n^{\frac{3}{4}}}{log(\sqrt{n})})\)&lt;/span&gt;，然而我并不会证&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://x.phoenixgs.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="算法" scheme="http://x.phoenixgs.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数论" scheme="http://x.phoenixgs.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
</feed>
