<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PhoenixGS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://x.phoenixgs.cn/"/>
  <updated>2019-01-11T07:02:51.558Z</updated>
  <id>http://x.phoenixgs.cn/</id>
  
  <author>
    <name>PhoenixGS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>64位模数乘法</title>
    <link href="http://x.phoenixgs.cn/64%E4%BD%8D%E6%A8%A1%E6%95%B0%E4%B9%98%E6%B3%95/"/>
    <id>http://x.phoenixgs.cn/64位模数乘法/</id>
    <published>2019-01-11T07:00:46.000Z</published>
    <updated>2019-01-11T07:02:51.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当模数是一个64位的整数时，乘法取模过程中就会溢出。</p><p>此时有两种解决方法</p><p>一种是采取与快速幂类似的思想，时间复杂度位$O(lg)$</p><a id="more"></a><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> y, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> M)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">y = (y % M + M) % M;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> tmp = x;</span><br><span class="line"><span class="hljs-keyword">while</span> (y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (y &amp; <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = (ans + tmp) % M;</span><br><span class="line">&#125;</span><br><span class="line">tmp = (tmp + tmp) % M;</span><br><span class="line">y &gt;&gt;= <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种是利用<code>long double</code>来进行运算，有可能会计算错误，但时间复杂度是$O(1)$的</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> x, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> y, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> M)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> (x * y - (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)x / M * y) * M + M) % M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来很奇妙是不是？。。。玄学的一匹</p><p><img src="http://phoenixgs-1253902147.coscd.myqcloud.com/20190111145913.png" alt=""></p><p>摘自2009年国家集训队论文，骆可强：《论程序底层优化的一些方法与技巧》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当模数是一个64位的整数时，乘法取模过程中就会溢出。&lt;/p&gt;
&lt;p&gt;此时有两种解决方法&lt;/p&gt;
&lt;p&gt;一种是采取与快速幂类似的思想，时间复杂度位$O(lg)$&lt;/p&gt;
    
    </summary>
    
    
      <category term="黑科技" scheme="http://x.phoenixgs.cn/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>边分治</title>
    <link href="http://x.phoenixgs.cn/%E8%BE%B9%E5%88%86%E6%B2%BB/"/>
    <id>http://x.phoenixgs.cn/边分治/</id>
    <published>2019-01-10T15:08:08.000Z</published>
    <updated>2019-01-10T15:10:38.293Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>边分治用来解决一些点分治中一些解决不了的问题。</p><p>比如说点分治时有很多棵子树，合并这些信息时不能保证时间复杂度。</p><p>而边分治时最多只会有两棵子树，就可以很好地解决问题。</p><a id="more"></a><p>算法与点分治大致相同，就是找到一条边使得删去这条边后最大的那棵子树的大小最小。</p><p>但这个算法在菊花图时时间复杂度会退化成$O(n^2)$，因此需要将原树转换为一棵二叉树，这样每个点度数最多为$3$，分治后子树大小最多为原树的$\frac{2}{3}$，就不会出现刚刚那样的问题了。</p><p>但边分治还有一个限制条件，那就是后来加进去的边对答案不会产生影响</p><p>我的多叉树转二叉树的代码，（显然最后的点数<code>nn</code>最多只有$2n$）:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> father)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = nextx[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v = vet[i];</span><br><span class="line"><span class="hljs-keyword">if</span> (v != father)</span><br><span class="line">&#123;</span><br><span class="line">dfs1(v, u);</span><br><span class="line">vec[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">dfs1(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> nn = n;</span><br><span class="line">edgenum = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">memset</span>(head, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(head));</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">int</span>)vec[i].size() &lt; <span class="hljs-number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-keyword">int</span>)vec[i].size(); j++)</span><br><span class="line">&#123;</span><br><span class="line">add(i, vec[i][j], );</span><br><span class="line">add(vec[i][j], i, );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> pre = i;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-keyword">int</span>)vec[i].size() - <span class="hljs-number">2</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">add(pre, vec[i][j], );</span><br><span class="line">add(vec[i][j], pre, );</span><br><span class="line">nn++;</span><br><span class="line">x[nn] = x[i];</span><br><span class="line">add(pre, nn, );</span><br><span class="line">add(nn, pre, );</span><br><span class="line">pre = nn;</span><br><span class="line">&#125;</span><br><span class="line">add(pre, vec[i][vec[i].size() - <span class="hljs-number">2</span>], );</span><br><span class="line">add(vec[i][vec[i].size() - <span class="hljs-number">2</span>], pre, );</span><br><span class="line">add(pre, vec[i][vec[i].size() - <span class="hljs-number">1</span>], );</span><br><span class="line">add(vec[i][vec[i].size() - <span class="hljs-number">1</span>], pre, );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然可以更简单粗暴一些，代价就是点数会稍微多一点点，但还是不会超过$2n$:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">dfs1(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> nn = n;</span><br><span class="line">edgenum = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">memset</span>(head, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(head));</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> pre = u;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-keyword">int</span>)vec[u].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">add(pre, vec[u][i], );</span><br><span class="line">add(vec[u][i], pre, );</span><br><span class="line">nn++;</span><br><span class="line">add(pre, nn, );</span><br><span class="line">add(nn, pre, );</span><br><span class="line">pre = nn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的部分和点分治差不多。</p><p>这里是找根的代码:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getroot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> father, <span class="hljs-keyword">int</span> S)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">size[u] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = nextx[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v = vet[i];</span><br><span class="line"><span class="hljs-keyword">if</span> (v != father &amp;&amp; ! vis[i])</span><br><span class="line">&#123;</span><br><span class="line">getroot(v, u, S);</span><br><span class="line">f[i &gt;&gt; <span class="hljs-number">1</span>] = <span class="hljs-built_in">std</span>::max(size[v], S - size[v]);</span><br><span class="line"><span class="hljs-keyword">if</span> (f[i &gt;&gt; <span class="hljs-number">1</span>] &lt; f[root &gt;&gt; <span class="hljs-number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">root = i;</span><br><span class="line">&#125;</span><br><span class="line">size[u] += size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分治的大致框架:</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> father, <span class="hljs-keyword">int</span> cas, )</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">size[u] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = nextx[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> v = vet[i];</span><br><span class="line"><span class="hljs-keyword">if</span> (v != father &amp;&amp; ! vis[i])</span><br><span class="line">&#123;</span><br><span class="line">dfs(v, u, cas, );</span><br><span class="line">size[u] += size[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rt, <span class="hljs-keyword">int</span> father, <span class="hljs-keyword">int</span> S)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (! rt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[rt] = vis[rt ^ <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">dfs(vet[rt ^ i], <span class="hljs-number">0</span>, i, );</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//solve</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> ss = size[vet[rt ^ i]];</span><br><span class="line">getroot(vet[rt ^ i], <span class="hljs-number">0</span>, ss);</span><br><span class="line">solve(root, <span class="hljs-number">0</span>, ss);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;边分治用来解决一些点分治中一些解决不了的问题。&lt;/p&gt;
&lt;p&gt;比如说点分治时有很多棵子树，合并这些信息时不能保证时间复杂度。&lt;/p&gt;
&lt;p&gt;而边分治时最多只会有两棵子树，就可以很好地解决问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="树" scheme="http://x.phoenixgs.cn/tags/%E6%A0%91/"/>
    
      <category term="分治" scheme="http://x.phoenixgs.cn/tags/%E5%88%86%E6%B2%BB/"/>
    
      <category term="树分治" scheme="http://x.phoenixgs.cn/tags/%E6%A0%91%E5%88%86%E6%B2%BB/"/>
    
      <category term="算法" scheme="http://x.phoenixgs.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="边分治" scheme="http://x.phoenixgs.cn/tags/%E8%BE%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
</feed>
