<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PhoenixGS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://x.phoenixgs.cn/"/>
  <updated>2020-07-25T13:06:25.208Z</updated>
  <id>http://x.phoenixgs.cn/</id>
  
  <author>
    <name>PhoenixGS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>杜教筛</title>
    <link href="http://x.phoenixgs.cn/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    <id>http://x.phoenixgs.cn/杜教筛/</id>
    <published>2020-07-25T11:57:57.000Z</published>
    <updated>2020-07-25T13:06:25.208Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h1><p>杜教筛用来解决类似求$\sum_{i=1}^nf(i)$的问题</p><p>设$S(n)=\sum_{i=1}^nf(i)$</p><p>假如我们现在找到了一个积性函数$g$，那么考虑下式（其中$*$表示狄利克雷卷积）</p><a id="more"></a><p>$$<br>\sum_{i=1}^n(f \ast g)(i) \<br>=\sum_{i=1}^n\sum_{d|i}f(\frac{i}{d})g(d) \<br>=\sum_{d=1}^ng(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}f(i) \<br>=\sum_{d=1}^ng(d)S(\lfloor\frac{n}{d}\rfloor)<br>$$</p><p>再考虑下式</p><p>$$<br>g(1)S(n)=\sum_{i=1}^ng(i)S(\lfloor\frac{n}{i}\rfloor)-\sum_{i=2}^ng(i)S(\lfloor\frac{n}{i}\rfloor) \<br>=\sum_{i=1}^n(f \ast g)(i)-\sum_{i=2}^ng(i)S(\lfloor\frac{n}{i}\rfloor)<br>$$</p><p>那么，假如我们可以快速地求出$(f*g)(i)$的前缀和以及$g(i)$的前缀和，那么我们就可以用数论分块递归地求解$S(n)$</p><p>其中，计算$S(n)$时需要记忆化。记忆化有两种实现方式：</p><ol><li>使用<code>unordered_map</code></li><li>由于$\lfloor\frac{\frac{n}{i}}{j}\rfloor \in {\lfloor\frac{n}{i}\rfloor}$，所以不同的$S(k)$的$k$的个数最多只有$O(\sqrt{n})$个。因此当$k\leq \sqrt{n}$时，记录在$sum(k)$中，否则记录在$sum(\sqrt{n}+\lfloor\frac{n}{k}\rfloor)$中</li></ol><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>假如直接数论分块递归求解，那么时间复杂度<br>$$<br>T(n)=\sum_{i=1}^{\sqrt{n}}\sqrt{i}+\sum_{i=1}^{\sqrt{n}}\sqrt{\frac{n}{i}}=O(n^{\frac{3}{4}})<br>$$<br>用积分等方法可以轻松计算</p><p>假如先预处理出前$m$个$S(n)$，那么时间复杂度变为<br>$$<br>T(n)=m+\sum_{i=1}^{\lfloor\frac{n}{m}\rfloor}\sqrt{\frac{n}{i}}=O(m+\frac{n}{\sqrt{m}})<br>$$</p><p>取$m=n^{\frac{2}{3}}$，即得<br>$$<br>T(n)=O(n^{\frac{2}{3}})<br>$$</p><h2 id="g-的选择"><a href="#g-的选择" class="headerlink" title="$g$的选择"></a>$g$的选择</h2><p>可以发现能否使用杜教筛的关键就在于$g$的选择，下列几种常见的$f$与$g$的对应</p><h3 id="f-mu"><a href="#f-mu" class="headerlink" title="$f=\mu$"></a>$f=\mu$</h3><p>$$<br>f=\mu,g=I,f*g=\epsilon<br>$$</p><h3 id="f-phi"><a href="#f-phi" class="headerlink" title="$f=\phi$"></a>$f=\phi$</h3><p>$$<br>f=\phi,g=I,f*g=id<br>$$</p><h3 id="f-phi-cdot-id"><a href="#f-phi-cdot-id" class="headerlink" title="$f=\phi \cdot id$"></a>$f=\phi \cdot id$</h3><p>$$<br>f=\phi \cdot id,g=id,f*g=id_2<br>$$</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>求$\phi$和$\mu$的前缀和</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> last = <span class="hljs-string">'+'</span>, ch = getchar();</span><br><span class="line">    <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) last = ch, ch = getchar();</span><br><span class="line">    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> tmp = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) tmp = tmp * <span class="hljs-number">10</span> + ch - <span class="hljs-number">48</span>, ch = getchar();</span><br><span class="line">    <span class="hljs-keyword">if</span> (last == <span class="hljs-string">'-'</span>) tmp = -tmp;</span><br><span class="line">    <span class="hljs-keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> lim = <span class="hljs-number">5000000</span>, _l = lim + <span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> T;</span><br><span class="line"><span class="hljs-keyword">int</span> flag[_l], phi[_l], mu[_l];</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> sphi[_l], smu[_l];</span><br><span class="line"><span class="hljs-keyword">int</span> primenum;</span><br><span class="line"><span class="hljs-keyword">int</span> prime[_l];</span><br><span class="line"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>&gt; mphi, mmu;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">Sphi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (n &lt;= lim)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> sphi[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (mphi[n])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> mphi[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)n * (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = n / (n / l);</span><br><span class="line">ans -= (r - l + <span class="hljs-number">1</span>) * Sphi(n / l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> mphi[n] = ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">Smu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (n &lt;= lim)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> smu[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> (mmu[n])</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> mmu[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = n / (n / l);</span><br><span class="line">ans -= (r - l + <span class="hljs-number">1</span>) * Smu(n / l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> mmu[n] = ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-comment">//init</span></span><br><span class="line">mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= lim; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (! flag[i])</span><br><span class="line">&#123;</span><br><span class="line">primenum++;</span><br><span class="line">prime[primenum] = i;</span><br><span class="line">mu[i] = <span class="hljs-number">-1</span>;</span><br><span class="line">phi[i] = i - <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= primenum &amp;&amp; i * prime[j] &lt;= lim; j++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i * prime[j]] = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">mu[i * prime[j]] = <span class="hljs-number">0</span>;</span><br><span class="line">phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mu[i * prime[j]] = -mu[i];</span><br><span class="line">phi[i * prime[j]] = phi[i] * (prime[j] - <span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= lim; i++)</span><br><span class="line">&#123;</span><br><span class="line">smu[i] = smu[i - <span class="hljs-number">1</span>] + mu[i];</span><br><span class="line">sphi[i] = sphi[i - <span class="hljs-number">1</span>] + phi[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> T = read();</span><br><span class="line"><span class="hljs-keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> n = read();</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld %lld\n"</span>, Sphi(n), Smu(n));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;杜教筛&quot;&gt;&lt;a href=&quot;#杜教筛&quot; class=&quot;headerlink&quot; title=&quot;杜教筛&quot;&gt;&lt;/a&gt;杜教筛&lt;/h1&gt;&lt;p&gt;杜教筛用来解决类似求$\sum_{i=1}^nf(i)$的问题&lt;/p&gt;
&lt;p&gt;设$S(n)=\sum_{i=1}^nf(i)$&lt;/p&gt;
&lt;p&gt;假如我们现在找到了一个积性函数$g$，那么考虑下式（其中$*$表示狄利克雷卷积）&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://x.phoenixgs.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="http://x.phoenixgs.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数论" scheme="http://x.phoenixgs.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>QTREE系列题</title>
    <link href="http://x.phoenixgs.cn/QTREE/"/>
    <id>http://x.phoenixgs.cn/QTREE/</id>
    <published>2019-12-05T13:57:57.000Z</published>
    <updated>2019-12-05T14:00:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="QTREE"><a href="#QTREE" class="headerlink" title="QTREE"></a>QTREE</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><code>CHANGE i ti</code> : change the cost of the i-th edge to ti<br>or<br><code>QUERY a b</code> : ask for the maximum edge cost on the path from node a to node b</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>树链剖分$O(nlg^2 n)$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p><a href="https://github.com/PhoenixGS/Solutions/blob/master/SPOJ/QTREE.cpp" target="_blank" rel="noopener">QTREE.cpp</a></p><a id="more"></a><h1 id="QTREE2"><a href="#QTREE2" class="headerlink" title="QTREE2"></a>QTREE2</h1><p><code>DIST a b</code> : ask for the distance between node a and node b<br>or<br><code>KTH a b k</code> : ask for the k-th node on the path from node a to node b</p><h2 id="Solution-alpha"><a href="#Solution-alpha" class="headerlink" title="Solution $\alpha$"></a>Solution $\alpha$</h2><p>倍增</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><p><a href="https://github.com/PhoenixGS/Solutions/blob/master/SPOJ/QTREE2.cpp" target="_blank" rel="noopener">QTREE2.cpp</a></p><h2 id="Solution-beta"><a href="#Solution-beta" class="headerlink" title="Solution $\beta$"></a>Solution $\beta$</h2><p>LCT</p><h1 id="QTREE3"><a href="#QTREE3" class="headerlink" title="QTREE3"></a>QTREE3</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><p><code>0 i</code> : change the color of the i-th node (from white to black, or from black to white);<br>or<br><code>1 v</code> : ask for the id of the first black node on the path from node 1 to node v. if it doesn’t exist, you may return -1 as its result.</p><h2 id="Solution-alpha-1"><a href="#Solution-alpha-1" class="headerlink" title="Solution $\alpha$"></a>Solution $\alpha$</h2><p>考虑维护每个点到根节点链上的黑点个数，使用DFS序+树状数组</p><p>然后对于每个询问树上二分即可</p><p>时间复杂度$O(nlg^2 n)$</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><p><a href="https://github.com/PhoenixGS/Solutions/blob/master/SPOJ/QTREE3.cpp" target="_blank" rel="noopener">QTREE3.cpp</a></p><h2 id="Solution-beta-1"><a href="#Solution-beta-1" class="headerlink" title="Solution $\beta$"></a>Solution $\beta$</h2><p>树链剖分，线段树上每个线段维护最左边的黑点</p><p>时间复杂度$O(nlg^2 n)$</p><h2 id="Solution-gamma"><a href="#Solution-gamma" class="headerlink" title="Solution $\gamma$"></a>Solution $\gamma$</h2><p>LCT，询问即在到根的链的Splay上查询第一个黑点</p><p>时间复杂度$O(nlgn)$</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><p><a href="https://github.com/PhoenixGS/Solutions/blob/master/SPOJ/QTREE3-LCT.cpp" target="_blank" rel="noopener">QTREE3-LCT.cpp</a></p><h1 id="QTREE4"><a href="#QTREE4" class="headerlink" title="QTREE4"></a>QTREE4</h1><h2 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h2><p><code>C a</code> : change the color of node a.(from black to white or from white to black)<br><code>A</code> : ask for the maximum dist(a, b), both of node a and node b must be white(a can be equal to b). Obviously, as long as there is a white node, the result will alway be non negative.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>动态点分治</p><p>设分治到一个连通块时的根为<code>root</code></p><p>对它的每一棵子树用堆维护最大的白点到<code>root</code>的距离，用其中的最大值更新下面这个堆：</p><p>对每一个<code>root</code>用堆维护最大的白点到<code>root</code>的距离，并用堆中最大的两个值的和更新下面这个堆：</p><p>每个<code>root</code>的最优解用堆维护</p><p>以上所有堆都为可删堆</p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><p><a href="https://github.com/PhoenixGS/Solutions/blob/master/SPOJ/QTREE4.cpp" target="_blank" rel="noopener">QTREE4.cpp</a></p><h1 id="QTREE5"><a href="#QTREE5" class="headerlink" title="QTREE5"></a>QTREE5</h1><h2 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h2><p><code>0 i</code> : change the color of i-th node(from black to white, or from white to black).<br><code>1 v</code> : ask for the minimum dist(u, v), node u must be white(u can be equal to v). Obviously, as long as node v is white, the result will always be 0.</p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>类似于QTREE4的Solution，似乎是简化版</p><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><p><a href="https://github.com/PhoenixGS/Solutions/blob/master/SPOJ/QTREE5.cpp" target="_blank" rel="noopener">QTREE5.cpp</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;QTREE&quot;&gt;&lt;a href=&quot;#QTREE&quot; class=&quot;headerlink&quot; title=&quot;QTREE&quot;&gt;&lt;/a&gt;QTREE&lt;/h1&gt;&lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;code&gt;CHANGE i ti&lt;/code&gt; : change the cost of the i-th edge to ti&lt;br&gt;or&lt;br&gt;&lt;code&gt;QUERY a b&lt;/code&gt; : ask for the maximum edge cost on the path from node a to node b&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;p&gt;树链剖分$O(nlg^2 n)$&lt;/p&gt;
&lt;h3 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/PhoenixGS/Solutions/blob/master/SPOJ/QTREE.cpp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QTREE.cpp&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
